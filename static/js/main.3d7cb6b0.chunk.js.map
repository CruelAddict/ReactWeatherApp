{"version":3,"sources":["modules/actions.js","components/FavoritesListHeader.js","containers/WeatherPanel.js","components/WeatherValuesList.js","components/SideWeatherPanelComponent.js","containers/SideWeatherPanel.js","components/FavoritesElementsComponent.js","containers/FavoritesElements.js","containers/FavoritesList.js","components/MainWeatherPanelComponent.js","components/HeaderComponent.js","modules/geolocationHandler.js","containers/Header.js","containers/MainWeatherPanel.js","App.js","modules/rootReducer.js","modules/favoritesReducer.js","modules/geoStateReducer.js","modules/store.js","index.js"],"names":["Types","CREATE_FAVORITE","DELETE_FAVORITE","SET_GEOLOCATION","favorite","type","payload","id","newState","dispatch","Promise","resolve","props","className","onSubmit","handleSubmit","placeholder","value","state","favoritesInput","onChange","handleChange","api_key","WeatherPanel","weatherByNameUrl","city","weatherByCoordinatesUrl","store","getState","geo","coordinates","latitude","longitude","isLoading","getWeather","bind","execWeatherRequest","parseWeatherData","this","url","Http","XMLHttpRequest","open","send","onreadystatechange","e","readyState","responseText","status","weather_data","JSON","parse","raiseError","temperature","wind","humidity","pressure","cloudiness","icon_code","fetch","method","then","res","blob","fileUrl","window","URL","webkitURL","createObjectURL","setState","icon","message","console","log","Component","split","map","s","charAt","toUpperCase","substring","join","toFixed","onClick","handleFavoriteRemoval","src","alt","WeatherValuesList","SideWeatherPanel","deleteFavorite","favoriteId","SideWeatherPanelComponent","connect","Actions","items","favorites","item","name","key","FavoritesElements","FavoritesElementsComponent","React","FavoritesList","event","createFavorite","preventDefault","target","FavoritesListHeader","refreshGeo","defaultCoordinates","callback","navigator","geolocation","getCurrentPosition","position","permissionGranted","coords","Header","setGeolocation","mainLocationRefresh","HeaderComponent","MainWeatherPanel","MainWeatherPanelComponent","App","setGeoStatus","combineReducers","action","length","filter","index","arr","initialState","localStorage","getItem","createStore","reducer","applyMiddleware","thunk","subscribe","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"qQAAMA,EAAQ,CACVC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,gBAAiB,mBAqBN,EAlBQ,SAAAC,GAAQ,MAAK,CAChCC,KAAML,EAAMC,gBACZK,QAASF,IAgBE,EAbQ,SAAAG,GAAE,MAAK,CAC1BF,KAAML,EAAME,gBACZI,QAASC,IAWE,EARc,SAAAC,GAAQ,OAAI,SAAAC,GAKrC,OAJAA,EAAS,CACLJ,KAAML,EAAMG,gBACZG,QAASE,IAENE,QAAQC,YAGJ,EAIXX,EC1BW,WAACY,GACZ,OAAO,yBAAKC,UAAW,8BACnB,yBAAKA,UAAW,6BACZ,uFAEJ,0BAAMA,UAAW,oBAAqBC,SAAUF,EAAMG,cAClD,2BACIC,YAAa,iHACbH,UAAW,qBACXI,MAAOL,EAAMM,MAAMC,eACnBC,SAAUR,EAAMS,eAEpB,4BAAQR,UAAW,2BAAnB,QCXNS,EAAU,mCAEKC,E,YACjB,aAAe,IAAD,8BACV,+CAmEJC,iBAAmB,4EACqC,EAAKZ,MAAMa,KADhD,kBAC8D,EAAKP,MAAMI,UArE9E,EAuEdI,wBAA0B,8EACgCC,EAAMC,WAAWC,IAAIC,YAAYC,SADjE,gBACiFJ,EAAMC,WAAWC,IAAIC,YAAYE,UADlH,kBACqI,EAAKd,MAAMI,UAtEtK,EAAKJ,MAAQ,CACTe,WAAW,EACXX,WAIJ,EAAKY,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKX,iBAAmB,EAAKA,iBAAiBW,KAAtB,gBACxB,EAAKT,wBAA0B,EAAKA,wBAAwBS,KAA7B,gBAC/B,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAZd,E,iFAgBVG,KAAKJ,e,yCAGUK,GAAM,IAAD,OACdC,EAAO,IAAIC,eACjBD,EAAKE,KAAK,MAAOH,GACjBC,EAAKG,OACLH,EAAKI,mBAAqB,SAACC,GACvB,GAAwB,IAApBL,EAAKM,WACL,GAAIN,EAAKO,aACL,GAAoB,MAAhBP,EAAKQ,OAAgB,CACrB,IAAIC,EAAeC,KAAKC,MAAMX,EAAKO,cACnC,EAAKV,iBAAiBY,QACnB,EAAKG,WAAW,wBACpB,EAAKA,WAAW,uC,uCAKlBH,GAAe,IAAD,OACvBI,EAAcJ,EAAY,KAAZ,KAA+B,OAC7CK,EAAOL,EAAY,KAAZ,MACPM,EAAWN,EAAY,KAAZ,SACXO,EAAWP,EAAY,KAAZ,SACXnB,EAAc,CACdE,UAAWiB,EAAY,MAAZ,IACXlB,SAAUkB,EAAY,MAAZ,KAEVxB,EAAOwB,EAAY,KACnBQ,EAAaR,EAAY,QAAY,GAAxB,YACbS,EAAYT,EAAY,QAAY,GAAxB,KAChBU,MAAM,oCAAD,OAAqCD,EAArC,WAAyD,CAC1DE,OAAQ,QACTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAE,GACF,IAAIC,GAAWC,OAAOC,KAAOD,OAAOE,WAAWC,gBAAgBL,GAC/D,EAAKM,SAAS,CACVpC,WAAW,EACXR,OACAK,cACAmB,aAAc,CACVI,cACAC,OACAC,WACAC,WACAC,aACAa,KAAMN,U,mCAatB1B,KAAK+B,SAAS,CACVpC,WAAW,IAEf,IAAIM,EAAMD,KAAKZ,0BACfY,KAAKF,mBAAmBG,K,iCAGjBgC,GACPC,QAAQC,IAAIF,O,GApFsBG,aCH3B,WAAC9D,GACZ,OAAO,yBAAKC,UAAW,sBACnB,yBAAKA,UAAW,qBACZ,0BAAMA,UAAW,qBAAjB,kCACA,0BAAMA,UAAW,uBAAwBD,EAAMM,MAAM+B,aAAaK,KAAlE,SAEJ,yBAAKzC,UAAW,qBACZ,0BAAMA,UAAW,qBAAjB,gEACA,0BAAMA,UAAW,uBAAwBD,EAAMM,MAAM+B,aAAaQ,WAAWkB,MAAM,KAAKC,KAAI,SAACC,GAAD,OACxFA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAU,MAAIC,KAAK,OAEzD,yBAAKpE,UAAW,qBACZ,0BAAMA,UAAW,qBAAjB,oDACA,0BAAMA,UAAW,uBAAwBD,EAAMM,MAAM+B,aAAaO,SAAlE,SAEJ,yBAAK3C,UAAW,qBACZ,0BAAMA,UAAW,qBAAjB,0DACA,0BAAMA,UAAW,uBAAwBD,EAAMM,MAAM+B,aAAaM,SAAlE,OAEJ,yBAAK1C,UAAW,qBACZ,0BAAMA,UAAW,qBAAjB,gEACA,0BACIA,UAAW,uBADf,IACwCD,EAAMM,MAAMY,YAAYE,UAAUkD,QAAQ,GADlF,KACwFtE,EAAMM,MAAMY,YAAYC,SAASmD,QAAQ,GADjI,QCpBG,WAACtE,GACZ,OAAIA,EAAMM,MAAMe,UAAkB,yBAAKpB,UAAW,gCAC9C,yBAAKA,UAAW,gCACZ,yBAAKA,UAAW,4BACZ,4BAAKD,EAAMM,MAAMO,OAErB,yBAAKZ,UAAW,+BAEhB,yBAAKA,UAAW,kBACZ,+BAGJ,yBAAKA,UAAW,oCACZ,4BACIsE,QAASvE,EAAMwE,sBACfvE,UAAW,2CAFf,UAMR,yBAAKA,UAAW,gBACZ,wBAAIA,UAAW,sBAAf,mKACA,yBAAKA,UAAW,qBACZ,uBAAGA,UAAW,mCAMlB,yBAAKA,UAAW,gCACZ,yBAAKA,UAAW,gCACZ,yBAAKA,UAAW,4BACZ,4BAAKD,EAAMM,MAAMO,OAErB,yBAAKZ,UAAW,8BACZ,8BAAOD,EAAMM,MAAM+B,aAAaI,YAAY6B,QAAQ,GAApD,eAEJ,yBAAKrE,UAAW,kBACZ,yBAAKA,UAAW,uBACZ,yBAAKwE,IAAKzE,EAAMM,MAAM+B,aAAaqB,KAAMgB,IAAK,mBAGtD,yBAAKzE,UAAW,oCACZ,4BACIsE,QAASvE,EAAMwE,sBACfvE,UAAW,2CAFf,UAMR,yBAAKA,UAAW,sBACZ,kBAAC0E,EAAD,CAAmBrE,MAAON,EAAMM,W,8NC9CpD,IASMsE,E,YAEF,aAAe,IAAD,8BACV,+CACKJ,sBAAwB,EAAKA,sBAAsBjD,KAA3B,gBAFnB,E,0EAMV,IAAII,EAAMD,KAAKd,mBACfc,KAAKF,mBAAmBG,K,8CAIxBD,KAAK1B,MAAM6E,eAAenD,KAAK1B,MAAM8E,c,+BAIrC,OACI,kBAACC,EAAD,CACIzE,MAAOoB,KAAKpB,MACZkE,sBAAuB9C,KAAK8C,4B,GApBb7D,GA0BhBqE,eAnCS,SAAA1E,GAAK,O,yVAAA,IACtBA,MAGoB,SAAAT,GAAQ,MAAK,CACpCgF,eAAgB,SAAAlF,GAAE,OAAIE,EAASoF,EAAuBtF,QA8B3CqF,CAA6CJ,GCrB7CI,eAhBS,SAAA1E,GAAK,MAAK,CAC9B4E,MAAO5E,EAAM6E,UAAUD,SAeZF,EAZmB,SAAAhF,GAC9B,OAAO,yBAAKC,UAAW,uBAClBD,EAAMkF,MAAMlB,KAAI,SAAAoB,GAAI,OACjB,kBAAC,EAAD,CACIvE,KAAMuE,EAAKC,KACXC,IAAKF,EAAKzF,GACVmF,WAAYM,EAAKzF,YCXZ4F,E,iLAEb,OAAO,kBAACC,EAAD,U,GAFgCC,IAAM3B,W,8NCGrD,IASM4B,E,YACF,aAAe,IAAD,8BACV,+CACKvF,aAAe,EAAKA,aAAaoB,KAAlB,gBACpB,EAAKd,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKjB,MAAQ,CACTC,eAAgB,IALV,E,0EAUDoF,GACTjE,KAAK1B,MAAM4F,eAAelE,KAAKpB,MAAMC,gBACrCoF,EAAME,mB,mCAGGF,GACTjE,KAAK+B,SAAS,CAAClD,eAAgBoF,EAAMG,OAAOzF,U,+BAI5C,OACI,6BACI,kBAAC0F,EAAD,CACI5F,aAAcuB,KAAKvB,aACnBM,aAAciB,KAAKjB,aACnBH,MAAOoB,KAAKpB,QAEhB,kBAAC,EAAD,W,GA5BYwD,aAmCbkB,eA5CS,SAAA1E,GAAK,O,yVAAA,IACtBA,MAGoB,SAAAT,GAAQ,MAAK,CACpC+F,eAAgB,SAAAR,GAAI,OAAIvF,EAASoF,EAAuBG,QAuC7CJ,CAEXU,GCjDW,WAAC1F,GACZ,OAAIA,EAAMM,MAAMe,UAAkB,yBAAKpB,UAAW,gBAC9C,wBAAIA,UAAW,sBAAf,mKACA,yBAAKA,UAAW,qBACZ,uBAAGA,UAAW,kCAKd,yBAAKA,UAAW,gCACZ,yBAAKA,UAAW,gCACZ,yBAAKA,UAAW,4BACZ,4BAAKD,EAAMM,MAAMO,OAErB,yBAAKZ,UAAW,aACZ,yBAAKA,UAAW,kBACZ,yBAAKwE,IAAKzE,EAAMM,MAAM+B,aAAaqB,KAAMgB,IAAK,mBAGtD,yBAAKzE,UAAW,yBACZ,8BAAOD,EAAMM,MAAM+B,aAAaI,YAAY6B,QAAQ,GAApD,gBAGR,kBAACK,EAAD,CAAmBrE,MAAON,EAAMM,UCxBjC,WAACN,GACZ,OACI,yBAAKL,GAAI,cACL,yBAAKM,UAAW,yBACZ,wBAAIA,UAAW,eAAf,wEAEJ,yBAAKA,UAAW,oBACZ,4BACIsE,QAASvE,EAAMgG,WACf/F,UAAW,sBAFf,oHCNVgG,EAAqB,CACvB9E,SAAU,UACVC,WAAY,SAGD,WAAC8E,GAkBZ,OAjBAC,UAAUC,YACND,UAAUC,YAAYC,oBAAmB,SAACC,GACtCvF,EAAMlB,SAASoF,EAA6B,CACxCsB,mBAAmB,EACnBrF,YAAa,CACTC,SAAUmF,EAASE,OAAOrF,SAC1BC,UAAWkF,EAASE,OAAOpF,cAE/B6B,KAAKiD,MACV,WACCnF,EAAMlB,SAASoF,EAA6B,CACxCsB,mBAAmB,EACnBrF,YAAa+E,KACbhD,KAAKiD,MAGbtC,QAAQC,IAAI,iBACT/D,QAAQC,WCLJ0G,E,YAhBX,aAAe,IAAD,8BACV,+CACKT,WAAa,EAAKA,WAAWzE,KAAhB,gBAFR,E,0EAMVmF,EAAehF,KAAK1B,MAAM2G,uB,+BAI1B,OACI,kBAACC,EAAD,CAAiBZ,WAAYtE,KAAKsE,iB,GAZzBlC,aCMf+C,E,YAEF,aAAe,IAAD,8BACV,+CACKF,oBAAsB,EAAKA,oBAAoBpF,KAAzB,gBAFjB,E,mFAMVG,KAAK+B,SAAS,CACVpC,WAAW,IAEfK,KAAKJ,e,+BAIL,OACI,6BACI,kBAAC,EAAD,CAAQqF,oBAAqBjF,KAAKiF,sBAClC,kBAACG,EAAD,CAA2BxG,MAAOoB,KAAKpB,a,GAlBxBK,GAyBhBqE,eA7BS,SAAA1E,GAAK,MAAK,CAC9BW,IAAKX,EAAMW,OA4BA+D,CAAyB6B,GCvBlCE,E,YACF,WAAY/G,GAAQ,IAAD,8BACf,+CACKM,MAAQ,CACTY,YAAalB,EAAMkB,aAHR,E,iFAQf8F,M,+BAIA,OAAwC,OAAjCtF,KAAK1B,MAAMuG,kBAA6B,KAE3C,yBAAK5G,GAAI,OACL,kBAAC,EAAD,CAAkBuB,YAAaQ,KAAK1B,MAAMkB,cAC1C,kBAAC,EAAD,W,GAjBEuE,IAAM3B,WAuBTkB,eA7BS,SAAA1E,GAAK,MAAK,CAC9BiG,kBAAmBjG,EAAMW,IAAIsF,kBAC7BrF,YAAaZ,EAAMW,IAAIC,eA2BZ8D,CAAyB+B,G,uBC/BzBE,cAAgB,CAC3B9B,UCHW,WAAkC,IAAjC7E,EAAgC,uDAAxB,CAAC4E,MAAO,IAAKgC,EAAW,uCAC5C,OAAQA,EAAOzH,MACX,KAAKwF,EAAc5F,gBACf,MAAO,CACH6F,MAAM,GAAD,mBAEM5E,EAAM4E,OAFZ,CAGG,CACIvF,GAA2B,IAAvBW,EAAM4E,MAAMiC,OAAe,EAAI7G,EAAM4E,MAAM5E,EAAM4E,MAAMiC,OAAS,GAAGxH,GAAK,EAC5E0F,KAAM6B,EAAOxH,YAIjC,KAAKuF,EAAc3F,gBACf,MAAO,CACH4F,MAAO5E,EAAM4E,MAAMkC,QAAO,SAAC/G,EAAOgH,EAAOC,GAAf,OAAwBjH,EAAMV,KAAOuH,EAAOxH,YAE9E,QACI,OAAOY,IDdfW,IEJW,WAAmE,IAAlEX,EAAiE,uDAAzD,CAACiG,kBAAmB,KAAMrF,YAAa,MAAOgG,EAAW,uCAC7E,OAAQA,EAAOzH,MACX,KAAKwF,EAAc1F,gBACf,OAAO2H,EAAOxH,QAClB,QACI,OAAOY,MCDbiH,EAAe,CACjBpC,UAAW,CACPD,MAJWsC,aAAaC,QAAQ,aAAenF,KAAKC,MAAMiF,aAAaC,QAAQ,cAAgB,IAMnGxG,IAAK,CACDsF,kBAAmB,KACnBrF,YAAa,OCLfH,G,MDUK2G,YACHC,EACAJ,EACAK,YAAgBC,OCXxB9G,EAAM+G,WAAU,WACZN,aAAaO,QAAQ,YAAazF,KAAK0F,UAAUjH,EAAMC,WAAWmE,UAAUD,WAGhF+C,IAASC,OACL,kBAAC,IAAD,CAAUnH,MAAOA,GACb,kBAAC,EAAD,OAEJoH,SAASC,eAAe,SAEbrH,oB","file":"static/js/main.3d7cb6b0.chunk.js","sourcesContent":["const Types = {\n    CREATE_FAVORITE: \"CREATE_FAVORITE\",\n    DELETE_FAVORITE: \"DELETE_FAVORITE\",\n    SET_GEOLOCATION: \"SET_GEOLOCATION\"\n};\n\nconst createFavorite = favorite => ({\n    type: Types.CREATE_FAVORITE,\n    payload: favorite\n});\n\nconst deleteFavorite = id => ({\n    type: Types.DELETE_FAVORITE,\n    payload: id\n});\n\nconst setGeolocationStatus = newState => dispatch => {\n    dispatch({\n        type: Types.SET_GEOLOCATION,\n        payload: newState\n    });\n    return Promise.resolve()\n};\n\nexport default {\n    createFavorite,\n    deleteFavorite,\n    setGeolocationStatus,\n    Types\n}\n","import React from 'react'\n\nexport default (props) => {\n    return <div className={\"favorites-header-container\"}>\n        <div className={\"favorites-title-container\"}>\n            <h2>Избранное</h2>\n        </div>\n        <form className={\"new-favorite-form\"} onSubmit={props.handleSubmit}>\n            <input\n                placeholder={\"Добавить новый город\"}\n                className={\"add-favorite-input\"}\n                value={props.state.favoritesInput}\n                onChange={props.handleChange}\n            />\n            <button className={\"favorites-action-button\"}>+</button>\n        </form>\n    </div>\n\n}\n","import {Component} from 'react'\nimport store from '../index'\n\nconst api_key = 'bf3565940c52aaa3383c1dbc23799bb1';\n\nexport default class WeatherPanel extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: true,\n            api_key,\n\n        };\n\n        this.getWeather = this.getWeather.bind(this);\n        this.weatherByNameUrl = this.weatherByNameUrl.bind(this);\n        this.weatherByCoordinatesUrl = this.weatherByCoordinatesUrl.bind(this);\n        this.execWeatherRequest = this.execWeatherRequest.bind(this);\n        this.parseWeatherData = this.parseWeatherData.bind(this);\n    }\n\n    componentDidMount() {\n        this.getWeather();\n    }\n\n    execWeatherRequest(url) {\n        const Http = new XMLHttpRequest();\n        Http.open(\"GET\", url);\n        Http.send();\n        Http.onreadystatechange = (e) => {\n            if (Http.readyState === 4) {\n                if (Http.responseText) {\n                    if (Http.status === 200) {\n                        let weather_data = JSON.parse(Http.responseText);\n                        this.parseWeatherData(weather_data)\n                    } else this.raiseError('City not found.')\n                } else this.raiseError('Failed to connect to the server.')\n            }\n        }\n    }\n\n    parseWeatherData(weather_data) {\n        let temperature = weather_data['main']['temp'] - 273.15;\n        let wind = weather_data['wind']['speed'];\n        let humidity = weather_data['main']['humidity'];\n        let pressure = weather_data['main']['pressure'];\n        let coordinates = {\n            longitude: weather_data['coord']['lon'],\n            latitude: weather_data['coord']['lat']\n        };\n        let city = weather_data['name'];\n        let cloudiness = weather_data['weather'][0]['description'];\n        let icon_code = weather_data['weather'][0]['icon'];\n        fetch(`http://openweathermap.org/img/wn/${icon_code}@2x.png`, {\n            method: 'GET',\n        }).then(res => res.blob())\n            .then(blob => {\n                let fileUrl = (window.URL || window.webkitURL).createObjectURL(blob);\n                this.setState({\n                    isLoading: false,\n                    city,\n                    coordinates,\n                    weather_data: {\n                        temperature,\n                        wind,\n                        humidity,\n                        pressure,\n                        cloudiness,\n                        icon: fileUrl\n                    }\n                })\n            });\n    }\n\n    weatherByNameUrl = () =>\n        `http://api.openweathermap.org/data/2.5/weather?q=${this.props.city}&appid=${this.state.api_key}`;\n\n    weatherByCoordinatesUrl = () =>\n        `http://api.openweathermap.org/data/2.5/weather?lat=${store.getState().geo.coordinates.latitude}&lon=${store.getState().geo.coordinates.longitude}&appid=${this.state.api_key}`;\n\n    getWeather() {\n        this.setState({\n            isLoading: true\n        });\n        let url = this.weatherByCoordinatesUrl();\n        this.execWeatherRequest(url);\n    }\n\n    raiseError(message) {\n        console.log(message);\n    }\n}\n","import React from 'react'\n\nexport default (props) => {\n    return <div className={\"weather-value-list\"}>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Ветер</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.wind} m/s</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Облачность</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.cloudiness.split(' ').map((s) =>\n                s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Давление</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.pressure} hpa</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Влажность</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.humidity} %</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Координаты</span>\n            <span\n                className={\"weather-value-value\"}>[{props.state.coordinates.longitude.toFixed(2)}, {props.state.coordinates.latitude.toFixed(2)}]</span>\n        </div>\n    </div>\n}\n","import React from 'react'\nimport WeatherValuesList from './WeatherValuesList'\n\nexport default (props) => {\n    if (props.state.isLoading) return <div className={\"side-weather-panel-container\"}>\n        <div className={\"side-weather-panel-main-data\"}>\n            <div className={\"side-city-name-container\"}>\n                <h2>{props.state.city}</h2>\n            </div>\n            <div className={\"side-temperature-container\"}>\n            </div>\n            <div className={\"side-icon-cell\"}>\n                <div>\n                </div>\n            </div>\n            <div className={\"delete-favorite-button-container\"}>\n                <button\n                    onClick={props.handleFavoriteRemoval}\n                    className={\"delete-favorite favorites-action-button\"}>×\n                </button>\n            </div>\n        </div>\n        <div className={\"loading-side\"}>\n            <h4 className={\"loading-title-side\"}>Подождите, данные загружаются</h4>\n            <div className={\"spinner-container\"}>\n                <i className={\"fa fa-refresh fa-spin fa-4x\"}></i>\n            </div>\n        </div>\n    </div>;\n    else\n        return (\n            <div className={\"side-weather-panel-container\"}>\n                <div className={\"side-weather-panel-main-data\"}>\n                    <div className={\"side-city-name-container\"}>\n                        <h2>{props.state.city}</h2>\n                    </div>\n                    <div className={\"side-temperature-container\"}>\n                        <span>{props.state.weather_data.temperature.toFixed(0)}°С</span>\n                    </div>\n                    <div className={\"side-icon-cell\"}>\n                        <div className={\"side-icon-container\"}>\n                            <img src={props.state.weather_data.icon} alt={\"weather icon\"}/>\n                        </div>\n                    </div>\n                    <div className={\"delete-favorite-button-container\"}>\n                        <button\n                            onClick={props.handleFavoriteRemoval}\n                            className={\"delete-favorite favorites-action-button\"}>×\n                        </button>\n                    </div>\n                </div>\n                <div className={\"side-weather-items\"}>\n                    <WeatherValuesList state={props.state}/>\n                </div>\n            </div>\n        )\n}\n\n","import React from 'react'\nimport WeatherPanel from './WeatherPanel'\nimport SideWeatherPanelComponent from '../components/SideWeatherPanelComponent'\nimport {connect} from 'react-redux';\nimport Actions from \"../modules/actions\";\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n    deleteFavorite: id => dispatch(Actions.deleteFavorite(id)),\n});\n\n\nclass SideWeatherPanel extends WeatherPanel {\n\n    constructor() {\n        super();\n        this.handleFavoriteRemoval = this.handleFavoriteRemoval.bind(this);\n    }\n\n    getWeather() {\n        let url = this.weatherByNameUrl();\n        this.execWeatherRequest(url);\n    }\n\n    handleFavoriteRemoval() {\n        this.props.deleteFavorite(this.props.favoriteId)\n    }\n\n    render() {\n        return (\n            <SideWeatherPanelComponent\n                state={this.state}\n                handleFavoriteRemoval={this.handleFavoriteRemoval}\n            />\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideWeatherPanel);\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport SideWeatherPanel from '../containers/SideWeatherPanel'\n\nconst mapStateToProps = state => ({\n    items: state.favorites.items\n});\n\nconst FavoritesElementComponent = props => {\n    return <div className={\"favorites-container\"}>\n        {props.items.map(item => (\n            <SideWeatherPanel\n                city={item.name}\n                key={item.id}\n                favoriteId={item.id}\n            />\n        ))}\n    </div>\n};\n\nexport default connect(mapStateToProps)(FavoritesElementComponent)\n","import React from 'react'\nimport FavoritesElementsComponent from '../components/FavoritesElementsComponent'\n\nexport default class FavoritesElements extends React.Component {\n    render() {\n        return <FavoritesElementsComponent/>;\n    }\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Actions from \"../modules/actions\";\nimport FavoritesListHeader from '../components/FavoritesListHeader'\nimport FavoritesElements from './FavoritesElements'\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n    createFavorite: item => dispatch(Actions.createFavorite(item)),\n});\n\n\nclass FavoritesList extends Component {\n    constructor() {\n        super();\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            favoritesInput: \"\"\n        }\n    }\n\n\n    handleSubmit(event) {\n        this.props.createFavorite(this.state.favoritesInput);\n        event.preventDefault();\n    }\n\n    handleChange(event) {\n        this.setState({favoritesInput: event.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                <FavoritesListHeader\n                    handleSubmit={this.handleSubmit}\n                    handleChange={this.handleChange}\n                    state={this.state}\n                />\n                <FavoritesElements/>\n            </div>\n\n        )\n    }\n}\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps)(\n    FavoritesList\n)\n","import React from 'react'\nimport WeatherValuesList from './WeatherValuesList'\n\nexport default (props) => {\n    if (props.state.isLoading) return <div className={\"loading-main\"}>\n        <h4 className={\"loading-title-main\"}>Подождите, данные загружаются</h4>\n        <div className={\"spinner-container\"}>\n            <i className={\"fa fa-refresh fa-spin fa-4x\"}></i>\n        </div>\n    </div>;\n    else\n        return (\n            <div className={\"main-weather-panel-container\"}>\n                <div className={\"main-weather-panel-main-data\"}>\n                    <div className={\"main-city-name-container\"}>\n                        <h2>{props.state.city}</h2>\n                    </div>\n                    <div className={\"icon-cell\"}>\n                        <div className={\"icon-container\"}>\n                            <img src={props.state.weather_data.icon} alt={\"weather icon\"}/>\n                        </div>\n                    </div>\n                    <div className={\"temperature-container\"}>\n                        <span>{props.state.weather_data.temperature.toFixed(0)}°С</span>\n                    </div>\n                </div>\n                <WeatherValuesList state={props.state}/>\n            </div>\n        )\n}\n\n","import React from 'react'\n\nexport default (props) => {\n    return (\n        <div id={\"app-header\"}>\n            <div className={\"header-text-container\"}>\n                <h1 className={\"header-text\"}>Погода здесь</h1>\n            </div>\n            <div className={\"button-container\"}>\n                <button\n                    onClick={props.refreshGeo}\n                    className={\"geo-refresh-button\"}\n                >Обновить геолокацию\n                </button>\n            </div>\n        </div>\n    )\n}\n","import store from '../index'\nimport Actions from \"./actions\";\n\nconst defaultCoordinates = {\n    latitude: 51.507351,\n    longitude: -0.127758\n};\n\nexport default (callback) => {\n    navigator.geolocation ?\n        navigator.geolocation.getCurrentPosition((position) => {\n            store.dispatch(Actions.setGeolocationStatus({\n                permissionGranted: true,\n                coordinates: {\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                }\n            })).then(callback)\n        }, () => {\n            store.dispatch(Actions.setGeolocationStatus({\n                permissionGranted: false,\n                coordinates: defaultCoordinates\n            })).then(callback);\n        })\n        :\n        console.log('Not supported')\n    return Promise.resolve()\n}\n","import React, {Component} from 'react'\nimport HeaderComponent from '../components/HeaderComponent'\nimport setGeolocation from '../modules/geolocationHandler'\n\nclass Header extends Component {\n    constructor() {\n        super();\n        this.refreshGeo = this.refreshGeo.bind(this);\n    }\n\n    refreshGeo() {\n        setGeolocation(this.props.mainLocationRefresh);\n    }\n\n    render() {\n        return (\n            <HeaderComponent refreshGeo={this.refreshGeo}/>\n        )\n    }\n}\n\nexport default Header\n","import React from 'react'\nimport WeatherPanel from './WeatherPanel'\nimport MainWeatherPanelComponent from '../components/MainWeatherPanelComponent'\nimport {connect} from 'react-redux'\nimport Header from \"./Header\";\n\nconst mapStateToProps = state => ({\n    geo: state.geo\n});\n\nclass MainWeatherPanel extends WeatherPanel {\n\n    constructor() {\n        super();\n        this.mainLocationRefresh = this.mainLocationRefresh.bind(this)\n    }\n\n    mainLocationRefresh() {\n        this.setState({\n            isLoading: true\n        });\n        this.getWeather()\n    }\n\n    render() {\n        return (\n            <div>\n                <Header mainLocationRefresh={this.mainLocationRefresh}/>\n                <MainWeatherPanelComponent state={this.state}/>\n            </div>\n\n        )\n    }\n}\n\nexport default connect(mapStateToProps)(MainWeatherPanel)\n","import React from 'react';\nimport FavoritesList from './containers/FavoritesList'\nimport MainWeatherPanel from './containers/MainWeatherPanel'\nimport setGeoStatus from './modules/geolocationHandler'\nimport {connect} from 'react-redux'\n\nconst mapStateToProps = state => ({\n    permissionGranted: state.geo.permissionGranted,\n    coordinates: state.geo.coordinates\n});\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            coordinates: props.coordinates\n        }\n    }\n\n    componentDidMount() {\n        setGeoStatus();\n    }\n\n    render() {\n        return this.props.permissionGranted === null ? null\n            :\n            <div id={\"app\"}>\n                <MainWeatherPanel coordinates={this.props.coordinates}/>\n                <FavoritesList/>\n            </div>\n    };\n}\n\n\nexport default connect(mapStateToProps)(App);\n","import favoritesReducer from './favoritesReducer'\nimport geoReducer from './geoStateReducer'\nimport {combineReducers} from 'redux'\n\nexport default combineReducers({\n    favorites: favoritesReducer,\n    geo: geoReducer\n})\n","import Actions from './actions'\n\nexport default (state = {items: []}, action) => {\n    switch (action.type) {\n        case Actions.Types.CREATE_FAVORITE:\n            return {\n                items:\n                    [\n                        ...state.items,\n                        {\n                            id: state.items.length === 0 ? 0 : state.items[state.items.length - 1].id + 1,\n                            name: action.payload\n                        }\n                    ]\n            };\n        case Actions.Types.DELETE_FAVORITE:\n            return {\n                items: state.items.filter((value, index, arr) => (value.id !== action.payload))\n            };\n        default:\n            return state;\n    }\n}\n","import Actions from './actions'\n\nexport default (state = {permissionGranted: null, coordinates: null}, action) => {\n    switch (action.type) {\n        case Actions.Types.SET_GEOLOCATION:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './rootReducer'\n\nconst savedItems = localStorage.getItem('favorites') ? JSON.parse(localStorage.getItem('favorites')) : [];\n\nconst initialState = {\n    favorites: {\n        items: savedItems\n    },\n    geo: {\n        permissionGranted: null,\n        coordinates: null\n    }\n};\n\nexport default () => {\n    return createStore(\n        reducer,\n        initialState,\n        applyMiddleware(thunk)\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport configureStore from './modules/store'\nimport './styles/main.scss'\n\nconst store = configureStore();\n\nstore.subscribe(() => {\n    localStorage.setItem('favorites', JSON.stringify(store.getState().favorites.items))\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\nexport default store\n"],"sourceRoot":""}