{"version":3,"sources":["modules/actions.js","components/FavoritesListHeader.js","containers/WeatherPanel.js","components/WeatherValuesList.js","components/SideWeatherPanelComponent.js","containers/SideWeatherPanel.js","components/FavoritesElementsComponent.js","containers/FavoritesElements.js","containers/FavoritesList.js","components/MainWeatherPanelComponent.js","components/HeaderComponent.js","modules/geolocationHandler.js","containers/Header.js","containers/MainWeatherPanel.js","App.js","modules/geoStateReducer.js","modules/rootReducer.js","modules/favoritesReducer.js","modules/store.js","index.js"],"names":["Types","CREATE_FAVORITE","DELETE_FAVORITE","SET_GEOLOCATION","SET_FAVORITES_WEATHER","SET_MAIN_WEATHER","favorite","type","payload","id","newState","dispatch","Promise","resolve","getWeather","then","weatherObj","errorMessage","isLoading","isFailed","panel","console","log","props","className","onSubmit","handleSubmit","placeholder","value","state","favoritesInput","onChange","handleChange","api_key","WeatherPanel","weatherByNameUrl","city","weatherByCoordinatesUrl","store","getState","geo","coordinates","latitude","longitude","bind","execWeatherRequest","parseWeatherData","getIcon","this","setState","url","reject","Http","XMLHttpRequest","open","send","onreadystatechange","e","readyState","responseText","status","weather_data","JSON","parse","errorObj","temperature","wind","humidity","pressure","cloudiness","icon_code","res","blob","fileUrl","window","URL","webkitURL","createObjectURL","icon","fetch","method","errorMsg","message","Component","split","map","s","charAt","toUpperCase","substring","join","toFixed","cityNotFound","onClick","handleFavoriteRemoval","setWeather","src","alt","WeatherValuesList","SideWeatherPanel","favorites","items","filter","favoriteId","prevProps","oldData","newData","setFavoriteWeather","deleteFavorite","SideWeatherPanelComponent","connect","Actions","item","name","key","FavoritesElements","FavoritesElementsComponent","React","FavoritesList","event","createFavorite","preventDefault","target","FavoritesListHeader","refreshGeo","defaultCoordinates","callback","navigator","geolocation","getCurrentPosition","position","permissionGranted","coords","Header","setGeolocation","mainLocationRefresh","HeaderComponent","MainWeatherPanel","setMainWeather","MainWeatherPanelComponent","App","setGeoStatus","combineReducers","action","length","index","arr","initialState","localStorage","getItem","createStore","reducer","applyMiddleware","thunk","subscribe","setItem","stringify","valueClone","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84f7c8b5.chunk.js","sourcesContent":["const Types = {\n    CREATE_FAVORITE: \"CREATE_FAVORITE\",\n    DELETE_FAVORITE: \"DELETE_FAVORITE\",\n    SET_GEOLOCATION: \"SET_GEOLOCATION\",\n    SET_FAVORITES_WEATHER: \"SET_FAVORITE_WEATHER\",\n    SET_MAIN_WEATHER: \"SET_MAIN_WEATHER\"\n};\n\nconst createFavorite = favorite => ({\n    type: Types.CREATE_FAVORITE,\n    payload: favorite\n});\n\nconst deleteFavorite = id => ({\n    type: Types.DELETE_FAVORITE,\n    payload: id\n});\n\nconst setGeolocationStatus = newState => dispatch => {\n    dispatch({\n        type: Types.SET_GEOLOCATION,\n        payload: newState\n    });\n    return Promise.resolve()\n};\n\nconst setFavoriteWeather = (favorite, id) => dispatch => {\n    favorite.getWeather().then(weatherObj => {\n        dispatch({\n            type: Types.SET_FAVORITES_WEATHER,\n            payload: {\n                id,\n                weatherObj\n            }\n        });\n    }, errorMessage => {\n        dispatch({\n            type: Types.SET_FAVORITES_WEATHER,\n            payload: {\n                id,\n                weatherObj: {\n                    isLoading: false,\n                    isFailed: true,\n                    errorMessage\n                }\n            }\n        });\n    });\n};\n\nconst setMainWeather = (panel) => dispatch => {\n    panel.getWeather().then(weatherObj => {\n        console.log('dispatching main weather');\n        weatherObj !== false && dispatch({\n            type: Types.SET_MAIN_WEATHER,\n            payload: {\n                weatherObj\n            }\n        });\n    }, errorMessage => {\n        dispatch({\n            type: Types.SET_MAIN_WEATHER,\n            payload: {\n                weatherObj: {\n                    isLoading: false,\n                    isFailed: true,\n                    errorMessage\n                }\n            }\n        });\n    });\n};\n\nexport default {\n    createFavorite,\n    deleteFavorite,\n    setGeolocationStatus,\n    setFavoriteWeather,\n    setMainWeather,\n    Types\n}\n","import React from 'react'\n\nexport default (props) => {\n    return <div className={\"favorites-header-container\"}>\n        <div className={\"favorites-title-container\"}>\n            <h2>Избранное</h2>\n        </div>\n        <form className={\"new-favorite-form\"} onSubmit={props.handleSubmit}>\n            <input\n                placeholder={\"Добавить новый город\"}\n                className={\"add-favorite-input\"}\n                value={props.state.favoritesInput}\n                onChange={props.handleChange}\n            />\n            <button className={\"favorites-action-button\"}>+</button>\n        </form>\n    </div>\n\n}\n","import {Component} from 'react'\nimport store from '../index'\n\nconst api_key = 'bf3565940c52aaa3383c1dbc23799bb1';\n\nexport default class WeatherPanel extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: true,\n            api_key,\n        };\n\n        this.getWeather = this.getWeather.bind(this);\n        this.weatherByNameUrl = this.weatherByNameUrl.bind(this);\n        this.weatherByCoordinatesUrl = this.weatherByCoordinatesUrl.bind(this);\n        this.execWeatherRequest = this.execWeatherRequest.bind(this);\n        this.parseWeatherData = this.parseWeatherData.bind(this);\n        this.getIcon = this.getIcon.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            isLoading: true,\n            isFailed: false\n        });\n    }\n\n    execWeatherRequest(url) {\n        return new Promise( (resolve, reject) => {\n            console.log('executing request');\n            const Http = new XMLHttpRequest();\n            Http.open(\"GET\", url);\n            Http.send();\n            Http.onreadystatechange = (e) => {\n                if (Http.readyState === 4) {\n                    if (Http.responseText) {\n                        if (Http.status === 200) {\n                            let weather_data = JSON.parse(Http.responseText);\n                            this.parseWeatherData(weather_data).then(weatherObj => resolve(weatherObj),\n                                errorObj => reject(errorObj))\n                        } else Http.status === 404 ? reject('Город не найден') : reject('Отказ сервера')\n                    } else reject('Сервер не отвечает')\n                }\n            }\n        });\n    }\n\n    parseWeatherData(weather_data) {\n        return new Promise((resolve, reject) => {\n            console.log('parsing data');\n            let temperature = weather_data['main']['temp'] - 273.15;\n            let wind = weather_data['wind']['speed'];\n            let humidity = weather_data['main']['humidity'];\n            let pressure = weather_data['main']['pressure'];\n            let coordinates = {\n                longitude: weather_data['coord']['lon'],\n                latitude: weather_data['coord']['lat']\n            };\n            let city = weather_data['name'];\n            let cloudiness = weather_data['weather'][0]['description'];\n            let icon_code = weather_data['weather'][0]['icon'];\n            this.getIcon(icon_code).then(res => res.blob())\n                .then(blob => {\n                    let fileUrl = (window.URL || window.webkitURL).createObjectURL(blob);\n                    console.log('weather data parsed');\n                    resolve ({\n                        city,\n                        coordinates,\n                        isLoading: false,\n                        isFailed: false,\n                        weather_data: {\n                            temperature,\n                            wind,\n                            humidity,\n                            pressure,\n                            cloudiness,\n                            icon: fileUrl\n                        }\n                    })\n                }, () => {reject('Сервер не отвечает')});\n        });\n    }\n\n    getIcon(icon_code) {\n        return fetch(`https://openweathermap.org/img/wn/${icon_code}@2x.png`, {\n            method: 'GET',\n        })\n    }\n\n    weatherByNameUrl = () =>\n        `https://api.openweathermap.org/data/2.5/weather?q=${this.props.city}&appid=${this.state.api_key}`;\n\n    weatherByCoordinatesUrl = () =>\n        `https://api.openweathermap.org/data/2.5/weather?lat=${store.getState().geo.coordinates.latitude}&lon=${store.getState().geo.coordinates.longitude}&appid=${this.state.api_key}`;\n\n    getWeather() {\n        return new Promise( (resolve, reject) => {\n            let url = this.weatherByCoordinatesUrl();\n                this.execWeatherRequest(url).then(\n                    weatherObj => (resolve(weatherObj)),\n                    errorMsg => (reject(errorMsg)));\n            }\n        );\n    }\n\n    raiseError(message) {\n        console.log(message);\n    }\n}\n","import React from 'react'\n\nexport default (props) => {\n    return <div className={\"weather-value-list\"}>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Ветер</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.wind} m/s</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Облачность</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.cloudiness.split(' ').map((s) =>\n                s.charAt(0).toUpperCase() + s.substring(1)).join(' ')}</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Давление</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.pressure} hpa</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Влажность</span>\n            <span className={\"weather-value-value\"}>{props.state.weather_data.humidity} %</span>\n        </div>\n        <div className={\"weather-value-row\"}>\n            <span className={\"weather-value-key\"}>Координаты</span>\n            <span\n                className={\"weather-value-value\"}>[{props.state.coordinates.longitude.toFixed(2)}, {props.state.coordinates.latitude.toFixed(2)}]</span>\n        </div>\n    </div>\n}\n","import React from 'react'\nimport WeatherValuesList from './WeatherValuesList'\n\nexport default (props) => {\n    let cityNotFound = props.state.errorMessage === 'Город не найден';\n    if (props.state.isLoading) return <div className={\"side-weather-panel-container\"}>\n        <div className={\"side-weather-panel-main-data\"}>\n            <div className={\"side-city-name-container\"}>\n                <h2>{props.state.city}</h2>\n            </div>\n            <div className={\"side-temperature-container\"}>\n            </div>\n            <div className={\"side-icon-cell\"}>\n                <div>\n                </div>\n            </div>\n            <div className={\"delete-favorite-button-container\"}>\n                <button\n                    onClick={props.handleFavoriteRemoval}\n                    className={\"delete-favorite favorites-action-button\"}>×\n                </button>\n            </div>\n        </div>\n        <div className={\"loading-side\"}>\n            <h4 className={\"loading-title-side\"} >Подождите, данные загружаются</h4>\n            <div className={\"spinner-container\"}>\n                <i className={\"fa fa-refresh fa-spin fa-4x\"}></i>\n            </div>\n        </div>\n    </div>;\n    else if(props.state.isFailed) return <div\n        className={cityNotFound ? \"side-weather-panel-container city-not-found\" : \"side-weather-panel-container\"}\n    >\n        <div className={\"side-weather-panel-main-data\"}>\n            <div className={\"side-city-name-container\"}>\n                <h2>{props.state.city}</h2>\n            </div>\n            <div className={\"side-temperature-container\"}>\n            </div>\n            <div className={\"side-icon-cell\"}>\n                <div>\n                </div>\n            </div>\n            <div className={\"delete-favorite-button-container\"}>\n                <button\n                    onClick={props.handleFavoriteRemoval}\n                    className={\"delete-favorite favorites-action-button\"}>×\n                </button>\n            </div>\n        </div>\n        {\n            cityNotFound ?\n            <div className={\"loading-side\"}>\n                <h4 className={\"loading-title-side side-error-message\"} >{props.state.errorMessage}</h4>\n            </div> :\n            <div className={\"loading-side\"}>\n                <h4 className={\"loading-title-side side-error-message\"} >{props.state.errorMessage}</h4>\n                <div className={\"refresh-button-container\"}>\n                    <button\n                        className={\"refresh-button\"}\n                        onClick={props.setWeather}\n                    >Попробовать снова</button>\n                </div>\n            </div>\n        }\n    </div>;\n    else\n        return (\n            <div className={\"side-weather-panel-container\"}>\n                <div className={\"side-weather-panel-main-data\"}>\n                    <div className={\"side-city-name-container\"}>\n                        <h2>{props.state.city}</h2>\n                    </div>\n                    <div className={\"side-temperature-container\"}>\n                        <span>{props.state.weather_data.temperature.toFixed(0)}°С</span>\n                    </div>\n                    <div className={\"side-icon-cell\"}>\n                        <div className={\"side-icon-container\"}>\n                            <img src={props.state.weather_data.icon} alt={\"weather icon\"}/>\n                        </div>\n                    </div>\n                    <div className={\"delete-favorite-button-container\"}>\n                        <button\n                            onClick={props.handleFavoriteRemoval}\n                            className={\"delete-favorite favorites-action-button\"}>×\n                        </button>\n                    </div>\n                </div>\n                <div className={\"side-weather-items\"}>\n                    <WeatherValuesList state={props.state}/>\n                </div>\n            </div>\n        )\n}\n\n","import React from 'react'\nimport WeatherPanel from './WeatherPanel'\nimport SideWeatherPanelComponent from '../components/SideWeatherPanelComponent'\nimport {connect} from 'react-redux';\nimport Actions from \"../modules/actions\";\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n    deleteFavorite: id => dispatch(Actions.deleteFavorite(id)),\n    setFavoriteWeather: (favorite, id) => dispatch(Actions.setFavoriteWeather(favorite, id))\n});\n\n\nclass SideWeatherPanel extends WeatherPanel {\n\n    constructor() {\n        super();\n        this.handleFavoriteRemoval = this.handleFavoriteRemoval.bind(this);\n        this.setWeather = this.setWeather.bind(this);\n    }\n\n    componentDidMount() {\n        this.setWeather();\n        this.setState(\n            this.props.favorites.items.filter(value => (value.id === this.props.favoriteId))[0].weatherObj\n        );\n    }\n\n    componentDidUpdate(prevProps) {\n        let oldData = prevProps.favorites.items.filter(value => (value.id === this.props.favoriteId))[0].weatherObj;\n        let newData = this.props.favorites.items.filter(value => (value.id === this.props.favoriteId))[0].weatherObj;\n        oldData !== newData &&  this.setState(newData);\n    }\n\n    setWeather() {\n        this.props.setFavoriteWeather(this, this.props.favoriteId);\n    }\n\n    getWeather() {\n        return new Promise( (resolve, reject) => {\n                let url = this.weatherByNameUrl();\n                this.execWeatherRequest(url).then(weatherObj => (resolve(weatherObj)),\n                    errorMsg => (reject(errorMsg)));\n            }\n        );\n    }\n\n    handleFavoriteRemoval() {\n        this.props.deleteFavorite(this.props.favoriteId);\n    }\n\n    render() {\n        return (\n                <SideWeatherPanelComponent\n                    state={this.state}\n                    handleFavoriteRemoval={this.handleFavoriteRemoval}\n                    setWeather={this.setWeather}\n                />\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideWeatherPanel);\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport SideWeatherPanel from '../containers/SideWeatherPanel'\n\nconst mapStateToProps = state => ({\n    items: state.favorites.items\n});\n\nconst FavoritesElementComponent = props => {\n    return <div className={\"favorites-container\"}>\n        {props.items.map(item => (\n            <SideWeatherPanel\n                city={item.name}\n                key={item.id}\n                favoriteId={item.id}\n            />\n        ))}\n    </div>\n};\n\nexport default connect(mapStateToProps)(FavoritesElementComponent)\n","import React from 'react'\nimport FavoritesElementsComponent from '../components/FavoritesElementsComponent'\n\nexport default class FavoritesElements extends React.Component {\n    render() {\n        return <FavoritesElementsComponent/>;\n    }\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Actions from \"../modules/actions\";\nimport FavoritesListHeader from '../components/FavoritesListHeader'\nimport FavoritesElements from './FavoritesElements'\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n    createFavorite: item => dispatch(Actions.createFavorite(item)),\n});\n\n\nclass FavoritesList extends Component {\n    constructor() {\n        super();\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            favoritesInput: \"\"\n        }\n    }\n\n    handleSubmit(event) {\n        this.props.createFavorite(this.state.favoritesInput);\n        event.preventDefault();\n    }\n\n    handleChange(event) {\n        this.setState({favoritesInput: event.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                <FavoritesListHeader\n                    handleSubmit={this.handleSubmit}\n                    handleChange={this.handleChange}\n                    state={this.state}\n                />\n                <FavoritesElements/>\n            </div>\n\n        )\n    }\n}\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps)(\n    FavoritesList\n)\n","import React from 'react'\nimport WeatherValuesList from './WeatherValuesList'\n\nexport default (props) => {\n    if (props.state.isLoading) return <div className={\"loading-main\"}>\n        <h4 className={\"loading-title-main\"}>Подождите, данные загружаются</h4>\n        <div className={\"spinner-container\"}>\n            <i className={\"fa fa-refresh fa-spin fa-4x\"}></i>\n        </div>\n    </div>;\n    else if(props.state.isFailed) return <div className={\"loading-main\"}>\n        <h4 className={\"loading-title-main error-message-main\"}>{props.state.errorMessage}</h4>\n        <span className={\"error-help-main\"}>Чтобы попробовать еще раз, нажмите кнопку \"Обновить геолокацию\"</span>\n    </div>;\n    else\n        return (\n            <div className={\"main-weather-panel-container\"}>\n                <div className={\"main-weather-panel-main-data\"}>\n                    <div className={\"main-city-name-container\"}>\n                        <h2>{props.state.city}</h2>\n                    </div>\n                    <div className={\"icon-cell\"}>\n                        <div className={\"icon-container\"}>\n                            <img src={props.state.weather_data.icon} alt={\"weather icon\"}/>\n                        </div>\n                    </div>\n                    <div className={\"temperature-container\"}>\n                        <span>{props.state.weather_data.temperature.toFixed(0)}°С</span>\n                    </div>\n                </div>\n                <WeatherValuesList state={props.state}/>\n            </div>\n        )\n}\n\n","import React from 'react'\n\nexport default (props) => {\n    return (\n        <div id={\"app-header\"}>\n            <div className={\"header-text-container\"}>\n                <h1 className={\"header-text\"}>Погода здесь</h1>\n            </div>\n            <div className={\"button-container\"}>\n                <button\n                    onClick={props.refreshGeo}\n                    className={\"geo-refresh-button\"}\n                >Обновить геолокацию\n                </button>\n            </div>\n        </div>\n    )\n}\n","import store from '../index'\nimport Actions from \"./actions\";\n\nconst defaultCoordinates = {\n    latitude: 51.507351,\n    longitude: -0.127758\n};\n\nexport default (callback) => {\n    navigator.geolocation ?\n        navigator.geolocation.getCurrentPosition((position) => {\n            store.dispatch(Actions.setGeolocationStatus({\n                permissionGranted: true,\n                coordinates: {\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                }\n            })).then(callback)\n        }, () => {\n            store.dispatch(Actions.setGeolocationStatus({\n                permissionGranted: false,\n                coordinates: defaultCoordinates\n            })).then(callback);\n        })\n        :\n        console.log('Not supported')\n    return Promise.resolve()\n}\n","import React, {Component} from 'react'\nimport HeaderComponent from '../components/HeaderComponent'\nimport setGeolocation from '../modules/geolocationHandler'\n\nclass Header extends Component {\n    constructor() {\n        super();\n        this.refreshGeo = this.refreshGeo.bind(this);\n    }\n\n    refreshGeo() {\n        setGeolocation(this.props.mainLocationRefresh);\n    }\n\n    render() {\n        return (\n            <HeaderComponent refreshGeo={this.refreshGeo}/>\n        )\n    }\n}\n\nexport default Header\n","import React from 'react'\nimport WeatherPanel from './WeatherPanel'\nimport MainWeatherPanelComponent from '../components/MainWeatherPanelComponent'\nimport {connect} from 'react-redux'\nimport Header from \"./Header\";\nimport Actions from \"../modules/actions\";\n\nconst mapStateToProps = state => ({\n    geo: state.geo\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setMainWeather: panel => dispatch(Actions.setMainWeather(panel))\n});\n\nclass MainWeatherPanel extends WeatherPanel {\n\n    constructor() {\n        super();\n        this.mainLocationRefresh = this.mainLocationRefresh.bind(this)\n    }\n\n    componentDidMount() {\n        this.setWeather();\n        this.setState(\n            this.props.geo.weatherObj\n        );\n    }\n\n    componentDidUpdate(prevProps) {\n        let oldData = prevProps.geo.weatherObj;\n        let newData = this.props.geo.weatherObj;\n        console.log(newData);\n        oldData !== newData &&  this.setState(newData);\n    }\n\n    setWeather() {\n        this.props.setMainWeather(this);\n    }\n\n    mainLocationRefresh() {\n        this.setState({\n            isLoading: true\n        });\n        this.setWeather();\n    }\n\n    render() {\n        return (\n            <div>\n                <Header mainLocationRefresh={this.mainLocationRefresh}/>\n                <MainWeatherPanelComponent state={this.state}/>\n            </div>\n\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainWeatherPanel)\n","import React from 'react';\nimport FavoritesList from './containers/FavoritesList'\nimport MainWeatherPanel from './containers/MainWeatherPanel'\nimport setGeoStatus from './modules/geolocationHandler'\nimport {connect} from 'react-redux'\n\nconst mapStateToProps = state => ({\n    permissionGranted: state.geo.permissionGranted,\n    coordinates: state.geo.coordinates\n});\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            coordinates: props.coordinates\n        }\n    }\n\n    componentDidMount() {\n        setGeoStatus();\n    }\n\n    render() {\n        return this.props.permissionGranted === null ? null\n            :\n            <div id={\"app\"}>\n                <MainWeatherPanel coordinates={this.props.coordinates}/>\n                <FavoritesList/>\n            </div>\n    };\n}\n\n\nexport default connect(mapStateToProps)(App);\n","import Actions from './actions'\n\nexport default (state = {permissionGranted: null, coordinates: null}, action) => {\n    switch (action.type) {\n        case Actions.Types.SET_GEOLOCATION:\n            return {\n                ...state,\n                ...action.payload\n            };\n\n        case Actions.Types.SET_MAIN_WEATHER:\n            return {\n                ...state,\n                weatherObj: action.payload.weatherObj\n            };\n\n        default:\n            return state;\n    }\n}\n","import favoritesReducer from './favoritesReducer'\nimport geoReducer from './geoStateReducer'\nimport {combineReducers} from 'redux'\n\nexport default combineReducers({\n    favorites: favoritesReducer,\n    geo: geoReducer\n})\n","import Actions from './actions'\n\nexport default (state = {items: []}, action) => {\n    switch (action.type) {\n        case Actions.Types.CREATE_FAVORITE:\n            return {\n                items:\n                    [\n                        ...state.items,\n                        {\n                            id: state.items.length === 0 ? 0 : state.items[state.items.length - 1].id + 1,\n                            name: action.payload\n                        }\n                    ]\n            };\n        case Actions.Types.SET_FAVORITES_WEATHER:\n            return {\n                items: state.items.map((value, index, arr) => {\n                        if (value.id === action.payload.id) {\n                            return {\n                                id: value.id,\n                                name: value.name,\n                                weatherObj: action.payload.weatherObj\n                            }\n                        } else {\n                            return value\n                        }\n                    }\n                )\n            };\n        case Actions.Types.DELETE_FAVORITE:\n            return {\n                items: state.items.filter((value, index, arr) => (value.id !== action.payload))\n            };\n        default:\n            return state;\n    }\n}\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './rootReducer'\n\nconst savedItems = localStorage.getItem('favorites') ? JSON.parse(localStorage.getItem('favorites')).map(value => {\n        return {\n            ...value,\n            isLoading: true\n        };\n    }) : [];\n\nconst initialState = {\n    favorites: {\n        items: savedItems\n    },\n    geo: {\n        permissionGranted: null,\n        coordinates: null\n    }\n};\n\nexport default () => {\n    return createStore(\n        reducer,\n        initialState,\n        applyMiddleware(thunk)\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport configureStore from './modules/store'\nimport './styles/main.scss'\n\nconst store = configureStore();\n\nstore.subscribe(() => {\n    localStorage.setItem('favorites', JSON.stringify(store.getState().favorites.items.map(value => {\n        let valueClone = {...value};\n        delete valueClone['weatherObj'];\n        console.log(valueClone);\n        return valueClone;\n    })))\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\nexport default store\n"],"sourceRoot":""}